(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{144:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return u}));var n=a(2),r=a(9),c=(a(0),a(178)),o={id:"api-get-executable-schema",title:"getExecutableSchema \u274c",sidebar_label:"getExecutableSchema \u274c"},i={id:"api-get-executable-schema",title:"getExecutableSchema \u274c",description:"Returns an executable schema with custom `Mutation` resolvers, and with `Query` resolvers that return data based on custom data sources",source:"@site/docs/api-get-executable-schema.md",permalink:"/graphql-kimera/docs/api-get-executable-schema",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/website/docs/api-get-executable-schema.md",sidebar_label:"getExecutableSchema \u274c",sidebar:"docs",previous:{title:"getMutationResolvers/cache \u274c",permalink:"/graphql-kimera/docs/api-cache"},next:{title:"mergeScenarios \u274c",permalink:"/graphql-kimera/docs/api-merge-scenarios"}},l=[{value:"<code>typeDefs</code>*",id:"typedefs",children:[]},{value:"<code>getDefaultDataSources(context)</code>",id:"getdefaultdatasourcescontext",children:[]},{value:"<code>customDataSources</code>",id:"customdatasources",children:[]},{value:"<code>getMutationResolvers(cache, buildMocks, context)</code>",id:"getmutationresolverscache-buildmocks-context",children:[{value:"<code>cache</code>",id:"cache",children:[]},{value:"<code>buildMocks(type, scenario)</code>",id:"buildmockstype-scenario",children:[]},{value:"<code>context</code>",id:"context",children:[]}]}],s={rightToc:l};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Returns an executable schema with custom ",Object(c.b)("inlineCode",{parentName:"p"},"Mutation")," resolvers, and with ",Object(c.b)("inlineCode",{parentName:"p"},"Query")," resolvers that return data based on custom data sources"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"getExecutableSchema(\n  typeDefs,\n  getDefaultDataSources, // Optional\n  customDataSources, // Optional\n  getMutationResolvers\n);\n")),Object(c.b)("h2",{id:"typedefs"},Object(c.b)("inlineCode",{parentName:"h2"},"typeDefs"),"*"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Required"),". A ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/graphql-kimera/docs/glossary#schema-definition-language"}),"GraphQL schema language string")," that contains the schema definition. Putting it another way, it's what usally resides in your ",Object(c.b)("inlineCode",{parentName:"p"},"schema.graphql")," file."),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getdefaultdatasourcescontext"},Object(c.b)("inlineCode",{parentName:"h2"},"getDefaultDataSources(context)")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Optional"),". A function that receives the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/graphql-kimera/docs/glossary#resolver"}),"resolver context")," as an argument and needs to return an object containing the available data sources that will be used to generate data for the type fields in the schema."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function getDefaultDataSources(context) {\n  return {\n    scenario: getDefaultScenario(context),\n    nameBuilders: getDefaultNameBuilders(context),\n    typeBuilders: getDefaultTypeBuilders(context),\n  };\n}\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("strong",{parentName:"p"},"Note")),Object(c.b)("p",{parentName:"blockquote"},"Read more about how data sources work in the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/graphql-kimera/docs/data-sources"}),"Data Sources")," part of the docs.")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"customdatasources"},Object(c.b)("inlineCode",{parentName:"h2"},"customDataSources")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Optional"),". An object that needs to have the same structure as the result of ",Object(c.b)("inlineCode",{parentName:"p"},"getDefaultDataSources"),". These data sources will overwrite the returned by ",Object(c.b)("inlineCode",{parentName:"p"},"getDefaultDataSources")," by performing a deep object merge. Its purpose is to provide a mechanism to overwrite the default data sources from outside of our server, e.g. from a React app."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const defaultScenario = {\n  viewer: {\n    userName: 'fancypants2019',\n    fullName: 'Tarzan'\n    subscribed: true,\n    watchList: [{}, { name: 'Some fancy movie title' }],\n    address: {\n      city: 'Cluj-Napoca',\n      country: 'Romania'\n    }\n  },\n};\n\nconst customScenario = {\n  viewer: {\n    userName: 'Jane',\n    watchList: [],\n    address: {\n      city: 'Iasi'\n    }\n  },\n};\n\ngetExecutableSchema(\n  typeDefs,\n  () => ({ scenario: defaultScenario }),\n  { scenario: customScenario },\n  getMutationResolvers\n);\n")),Object(c.b)("p",null,"The code above will result in having the ",Object(c.b)("inlineCode",{parentName:"p"},"viewer")," query have the following shape:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const defaultScenario = {\n  viewer: {\n    userName: "fancypants2019", // Default\n    fullName: "Jane", // Custom\n    subscribed: true, // Default\n    watchList: [], // Custom\n    address: {\n      city: "Iasi", // Custom\n      country: "Romania", // Default\n    },\n  },\n};\n')),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("strong",{parentName:"p"},"Note")),Object(c.b)("p",{parentName:"blockquote"},"The array fields are overwritten, while objects are deeply merged.")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getmutationresolverscache-buildmocks-context"},Object(c.b)("inlineCode",{parentName:"h2"},"getMutationResolvers(cache, buildMocks, context)")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Optional"),". A function that returns an object with the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/tutorial/resolvers.html#mutation"}),"Mutation resolvers")," for our schema."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Order {\n  id: ID!\n  total: Int\n  currency: String\n  products: [Product]\n}\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function getMutationResolvers(cache, buildMocks, context) {\n  return {\n    addOrder: (_, { total, currency, products }) => {\n      const newOrder = buildMocks(\n        'Order',\n        { total, currency, products }\n      )\n\n      cache.persona.orders = [...cache.persona.orders, newOrder]\n\n      return {\n        order: newOrder\n        errors: [],\n      };\n    },\n  };\n}\n")),Object(c.b)("h3",{id:"cache"},Object(c.b)("inlineCode",{parentName:"h3"},"cache")),Object(c.b)("p",null,"A reference to the generated ",Object(c.b)("inlineCode",{parentName:"p"},"Query")," tree. This is the persistence layer of our mocks, so this where changes need to be made as a result of the mutation. In a real server, this would be replace with access to a database."),Object(c.b)("p",null,"Read more on ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/graphql-kimera/docs/api-cache"}),"the ",Object(c.b)("inlineCode",{parentName:"a"},"cache")," documentation page"),"."),Object(c.b)("h3",{id:"buildmockstype-scenario"},Object(c.b)("inlineCode",{parentName:"h3"},"buildMocks(type, scenario)")),Object(c.b)("p",null,"A function that allows us to generate data for a specific Object Type. Useful when we need to create a new node in a mutation. Accepts the following arguments:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"type")," (Required): The type of the node we want to generate data for."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"scenario")," (Optional): A specific scenario relevant to the current generation of the node.")),Object(c.b)("p",null,"Read more on ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/graphql-kimera/docs/build-mocks"}),"the ",Object(c.b)("inlineCode",{parentName:"a"},"buildMocks")," documentation page"),"."),Object(c.b)("h3",{id:"context"},Object(c.b)("inlineCode",{parentName:"h3"},"context")),Object(c.b)("p",null,"The resolver ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/graphql-kimera/docs/glossary#context"}),"context"),"."))}u.isMDXComponent=!0},178:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},b=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=u(a),d=n,m=b["".concat(o,".").concat(d)]||b[d]||p[d]||c;return a?r.a.createElement(m,i({ref:t},s,{components:a})):r.a.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,o=new Array(c);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var s=2;s<c;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);