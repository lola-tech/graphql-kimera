(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(9),i=(n(0),n(161)),c={id:"abstract-types",title:"Abstract Types",sidebar_label:"Abstract Types"},o={id:"abstract-types",isDocsHomePage:!1,title:"Abstract Types",description:"Use \\\\typename to specify a concrete type for an abstract field.",source:"@site/docs/abstract-types.md",permalink:"/graphql-kimera/docs/abstract-types",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/packages/graphql-kimera-docs/docs/abstract-types.md",sidebar_label:"Abstract Types",sidebar:"docs",previous:{title:"Mocking Mutations",permalink:"/graphql-kimera/docs/mocking-mutations"},next:{title:"Glossary",permalink:"/graphql-kimera/docs/glossary"}},s=[{value:"Customize mocks using <code>__typename</code>",id:"customize-mocks-using-__typename",children:[]}],p={rightToc:s};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("em",{parentName:"p"},"Use ","_","_","typename to specify a concrete type for an abstract field."))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This page assumes familiarity with the concept of ",Object(i.b)("em",{parentName:"p"},"scenario"),". If you want to learn about scenarios, read the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/mocking-queries-scenario"}),'"Mocking queries"')," section of the docs."))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"By default"),", when Kimera needs to generate mocks for a field which is an interface or a union, it will do so as if the field were a concrete type. It will do so by ",Object(i.b)("strong",{parentName:"p"},"automatically selecting the first concrete type defined in the schema")," for that interface or union."),Object(i.b)("p",null,"Let's use the following schema as an example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  ships(model: String!): [Ship]!\n  assets: [Asset]!\n}\n\ninterface Ship {\n  id: ID!\n  model: String!\n}\n\nunion Asset = Powerplant | Starship | Rocket\n\ntype Rocket implements Ship {\n  id: ID!\n  model: String!\n}\n\ntype Starship implements Ship {\n  id: ID!\n  model: String!\n  class: String!\n}\n\ntype Powerplant {\n  address: String!\n}\n")),Object(i.b)("p",null,"With no configuration, Kimera will return:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a list of ",Object(i.b)("inlineCode",{parentName:"li"},"Powerplants")," for the ",Object(i.b)("inlineCode",{parentName:"li"},"assets")," query because the first concrete type defined in the schema for the ",Object(i.b)("inlineCode",{parentName:"li"},"Asset")," union is ",Object(i.b)("inlineCode",{parentName:"li"},"Powerplant"),";"),Object(i.b)("li",{parentName:"ul"},"a list of ",Object(i.b)("inlineCode",{parentName:"li"},"Rocket"),"s for the ",Object(i.b)("inlineCode",{parentName:"li"},"ships")," query because the first concrete type defined for the ",Object(i.b)("inlineCode",{parentName:"li"},"Ship")," interface is ",Object(i.b)("inlineCode",{parentName:"li"},"Rocket"),".")),Object(i.b)("h3",{id:"customize-mocks-using-__typename"},"Customize mocks using ",Object(i.b)("inlineCode",{parentName:"h3"},"__typename")),Object(i.b)("p",null,"To tell Kimera which concrete type you want it to mock, you need to define a ",Object(i.b)("inlineCode",{parentName:"p"},"__typename")," meta field in your scenario."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const executableSchema = getExecutableSchema({\n  typeDefs: schema,\n  mockProvidersFn: (context) => ({\n    scenario: {\n      ships: [{ __typename: 'Starship' }, { __typename: 'Rocket' }],\n      assets: [{ __typename: 'Starship' }, { __typename: 'Rocket' }, {}],\n    },\n  }),\n});\n")))}l.isMDXComponent=!0},161:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(n),u=a,d=b["".concat(c,".").concat(u)]||b[u]||m[u]||i;return n?r.a.createElement(d,o(o({ref:t},p),{},{components:n})):r.a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var p=2;p<i;p++)c[p]=n[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);