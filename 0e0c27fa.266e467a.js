(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{135:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(9),i=(n(0),n(170)),l={id:"field-name-builders",title:"Field Name Builders",sidebar_label:"Field Name Builders"},o={id:"field-name-builders",title:"Field Name Builders",description:"Allow us to set values for fields that repeat across types.",source:"@site/docs/field-name-builders.md",permalink:"/graphql-kimera/docs/field-name-builders",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/website/docs/field-name-builders.md",sidebar_label:"Field Name Builders",sidebar:"someSidebar",previous:{title:"Object Type Builders",permalink:"/graphql-kimera/docs/object-type-builders"},next:{title:"Scalar Type Builders",permalink:"/graphql-kimera/docs/scalar-type-builders"}},c=[],s={rightToc:c};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Allow us to set values for fields that repeat across types."),Object(i.b)("p",null,"When a field can't be found in neither a Scenario, nor a Object Type Builder, Kimera looks for it in the collection of Field Name Builders. These are meant to help us avoid repetition in cases where a field name refers the same type of data even when defined in multiple types."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"type Address {\n  id: ID!\n  name: String\n  line1: String\n  line2: String\n  city: String\n}\n")),Object(i.b)("p",null,"Here, the ",Object(i.b)("inlineCode",{parentName:"p"},"city")," field is defined on both types, and it always refers to the same data: a city name. This isn't the case for the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," field which while present on both types, refers to different things: names of addresses (Home, Work, etc.)."),Object(i.b)("p",null,"A collection of Field Name Builders is an object of the following form:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"{\n  city: () => casual.city\n  line1: () => casual.adress1,\n  line2: () => casual.adress1,\n}\n")),Object(i.b)("p",null,"Adding ",Object(i.b)("inlineCode",{parentName:"p"},"line1")," and ",Object(i.b)("inlineCode",{parentName:"p"},"line2")," to the Field Name Builders makes sure that we can safely add those fields to other types if we so wished, and Kimera would generate relevant values for them."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Note")),Object(i.b)("p",{parentName:"blockquote"},"If we wanted relevant values for the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," fields we would need to add them to the containing Object Type Builder (",Object(i.b)("inlineCode",{parentName:"p"},"Address"),"). If we don't care about the value that's generated for this field (ie. we haven't defined it in neither a Scenario nor a Object Type Builder, and since we don't have a Field Name Builder for it), Kimera will use a Scalar Type Builder to generate a value for it.")))}d.isMDXComponent=!0},170:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),d=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},p=function(e){var t=d(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,f=p["".concat(l,".").concat(b)]||p[b]||u[b]||i;return n?a.a.createElement(f,o({ref:t},s,{components:n})):a.a.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);