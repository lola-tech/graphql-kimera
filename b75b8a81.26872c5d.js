(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{159:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(9),i=(n(0),n(178)),o={id:"under-the-hood",title:"Under the hood",sidebar_label:"Under the hood"},l={id:"under-the-hood",title:"Under the hood",description:"This section explains how Kimera works under the hood. This will help you understand the API better.",source:"@site/docs/under-the-hood.md",permalink:"/graphql-kimera/docs/under-the-hood",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/website/docs/under-the-hood.md",sidebar_label:"Under the hood"},c=[{value:"1. Converting the schema",id:"1-converting-the-schema",children:[]},{value:"2. Walking the <code>Query</code> type tree",id:"2-walking-the-query-type-tree",children:[]},{value:"3.1 Generating data - Defaults",id:"31-generating-data---defaults",children:[]},{value:"3.2 Generating data - Custom",id:"32-generating-data---custom",children:[]}],s={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This section explains how Kimera works under the hood. This will help you understand the API better."),Object(i.b)("h2",{id:"1-converting-the-schema"},"1. Converting the schema"),Object(i.b)("p",null,"For Kimera to work, we need to supply it with ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/apollo-server/essentials/schema.html#sdl"}),"Schema Definition Language (SDL) string"),", which it converts to a custom data structure with the help of ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/EasyGraphQL/easygraphql-parser"}),"easygraphql-parser"),". Taking the following SDL string as an example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"type Query {\n  cars(fuel: Fuel): [MotorizedVehicle]\n}\n\nenum Fuel {\n  PETROL\n  DIESEL\n  HYBRID\n  ELECTRIC\n}\n\ninterface MotorizedVehicle {\n  id: ID!\n  fuel: Fuel\n}\n\ntype Car implements MotorizedVehicle {\n  id: ID!\n  fuel: Fuel\n}\n")),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51"}),"SDL")," string from above gets parsed into:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"{\n  Query: {\n    // Object|Union|Scalar|Enum|InterfaceTypeDefinition\n    type: 'ObjectTypeDefinition',\n    // Holds values for Enums\n    values: [],\n    // Holds types for Unions\n    types: [],\n    // Holds references links between types and interfaces\n    implementedTypes: []\n    fields: [\n      {\n        // Name of field\n        name: 'cars',\n        // Name of the type of the field\n        type: 'MotorizedVehicle',\n        isArray: true,\n        noNull: false,\n        // Describes arguments, similar format to `fields`\n        arguments: [\n          {\n            name: 'fuel', type: 'Fuel', // ...\n          },\n        ],\n      },\n    ],\n  },\n  Fuel: {\n    type: 'EnumTypeDefinition',\n    values: ['PETROL', 'DIESEL', 'HYBRID', 'ELECTRIC'],\n    // Same prop structure as Query ...\n  },\n  MotorizedVehicle: {\n    type: 'ObjectTypeDefinition',\n    implementedTypes: ['Car']\n    // ...\n  },\n  Car: {\n    type: 'InterfaceTypeDefinition',\n    implementedTypes: ['MotorizedVehicle']\n    // ...\n  },\n};\n")),Object(i.b)("h2",{id:"2-walking-the-query-type-tree"},"2. Walking the ",Object(i.b)("inlineCode",{parentName:"h2"},"Query")," type tree"),Object(i.b)("p",null,"In order to generate data, Kimera takes the ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," node from the parsed schema, and ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/lola-tech/graphql-kimera/src/engine.js#L142-L194"}),"starts processing its fields array recursively")," looking for ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/graphql-tools/scalars.html"}),"scalars and enums")," for which it can ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/lola-tech/graphql-kimera/src/engine.js#L46-L91"}),"generate data"),"."),Object(i.b)("p",null,"Generating data while walking the ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," tree, allows us to get the correct resolver structure for free, and helps us focus on the important part when mocking: having the data we want for the fields we want."),Object(i.b)("h2",{id:"31-generating-data---defaults"},"3.1 Generating data - Defaults"),Object(i.b)("p",null,"Without any configuration, when deciding how generate data for a field, Kimera will:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"for enum fields, it will ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/lola-tech/graphql-kimera/src/engine.js#L69-L73"}),"select the first value from the schema definition of the enum"),", or"),Object(i.b)("li",{parentName:"ul"},"for the default ",Object(i.b)("inlineCode",{parentName:"li"},"Int"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Float"),", ",Object(i.b)("inlineCode",{parentName:"li"},"String"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Boolean")," and ",Object(i.b)("inlineCode",{parentName:"li"},"ID")," scalars, ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/lola-tech/graphql-kimera/src/engine.js#L21-L29"}),"it will supply random values"),", or"),Object(i.b)("li",{parentName:"ul"},"for abstract fields, ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/lola-tech/graphql-kimera/src/engine.js#L119-L131"}),"it will select the first concrete implementation"),", or"),Object(i.b)("li",{parentName:"ul"},"for fields of custom scalar types, ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/lola-tech/graphql-kimera/src/engine.js#L86-L90"}),"it will supply a random string"),",")),Object(i.b)("h2",{id:"32-generating-data---custom"},"3.2 Generating data - Custom"),Object(i.b)("p",null,"In order to customize the data Kimera generates, you need to supply it with ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/graphql-kimera/docs/data-sources"}),"data sources"),". Kimera will prioritize the supplied data sources, and figue out what is the best data source for a specific field. If no data source could be found, it will default to the behavior described above."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Read more how ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/graphql-kimera/docs/data-sources"}),"data sources work")," to undersand how Kimera prioritizes them"),Object(i.b)("li",{parentName:"ul"},"See ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/graphql-kimera/docs/tutorial-getting-started"}),"how you get started with Kimera")," in order to see how the concepts above are applied")))}p.isMDXComponent=!0},178:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,b=u["".concat(o,".").concat(d)]||u[d]||h[d]||i;return n?a.a.createElement(b,l({ref:t},s,{components:n})):a.a.createElement(b,l({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);