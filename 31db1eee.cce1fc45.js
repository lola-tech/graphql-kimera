(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{146:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(2),r=t(9),c=(t(0),t(178)),o={id:"introducing-scenario",title:"The Scenario",sidebar_label:"Introducing the Scenario"},i={id:"introducing-scenario",title:"The Scenario",description:"_Customize mocks by defining a scenario._",source:"@site/docs/introducing-scenario.md",permalink:"/graphql-kimera/docs/introducing-scenario",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/website/docs/introducing-scenario.md",sidebar_label:"Introducing the Scenario",sidebar:"docs",previous:{title:"Setup",permalink:"/graphql-kimera/docs/setup"},next:{title:"First Builder",permalink:"/graphql-kimera/docs/mocking-types"}},s=[{value:"Default mocks using no configuration",id:"default-mocks-using-no-configuration",children:[]},{value:"Customize mocks using the scenario",id:"customize-mocks-using-the-scenario",children:[]},{value:"What is the Scenario?",id:"what-is-the-scenario",children:[{value:"The scenario can mock fewer fields than what&#39;s in the schema",id:"the-scenario-can-mock-fewer-fields-than-whats-in-the-schema",children:[]},{value:"It can go as deep as possible",id:"it-can-go-as-deep-as-possible",children:[]}]}],l={rightToc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Customize mocks by defining a scenario.")),Object(c.b)("p",null,"Let's start with the following Space X themed schema."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="server.js"',title:'"server.js"'}),"const schema = `\n  type Query {\n    launch: Launch\n  }\n\n  type Launch {\n    id: ID!\n    site: String\n    rockets: [Rocket]\n    isBooked: Boolean!\n  }\n\n  type Rocket {\n    id: ID!\n    name: String\n    type: String\n    fuel: Fuel\n  }\n\n  enum Fuel {\n    PLASMA\n    ION\n    DILITHIUM\n  }\n`;\n")),Object(c.b)("p",null,"We have a single query ",Object(c.b)("inlineCode",{parentName:"p"},"launch")," that will return information about the ongoing rocket launch."),Object(c.b)("h2",{id:"default-mocks-using-no-configuration"},"Default mocks using no configuration"),Object(c.b)("p",null,"To start mocking with Kimera, pass the schema definition to the ",Object(c.b)("inlineCode",{parentName:"p"},"getExecutableSchema")," function from Kimera as the ",Object(c.b)("inlineCode",{parentName:"p"},"typeDefs")," option. This will generate mocks for all queries in the schema, with zero configuration."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="server.js"',title:'"server.js"'}),'const { ApolloServer, gql } = require("apollo-server");\nconst { getExecutableSchema } = require("@lola-tech/graphql-kimera");\n\nconst schema = `\n  type Query {\n  ...\n`;\n\nconst executableSchema = getExecutableSchema({ typeDefs: schema });\n\nconst apollo = new ApolloServer({\n  schema: executableSchema,\n  introspection: true,\n});\n\napollo.listen({ port: 3337 }).then(({ url }) => {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n')),Object(c.b)("h2",{id:"customize-mocks-using-the-scenario"},"Customize mocks using the scenario"),Object(c.b)("p",null,"In order to customize the mocks, we'll need to defined our first mock provider: the scenario."),Object(c.b)("p",null,"Pass the scenario to the ",Object(c.b)("inlineCode",{parentName:"p"},"getExecutableSchema")," function in order to customize the query response."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const executableSchema = getExecutableSchema({\n  typeDefs,\n  scenario: {\n    launch: {\n      site: "Kennedy Space Station",\n      rockets: [{}, { type: "Exploration Vessel", fuel: "DILITHIUM" }],\n      isBooked: true,\n    },\n  },\n});\n')),Object(c.b)("p",null,"This will make it so the ",Object(c.b)("inlineCode",{parentName:"p"},"launch")," query will be mocked with its:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"site")," field set to ",Object(c.b)("inlineCode",{parentName:"li"},"Kennedy Space Station"),";"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"rockets"),' field containing two rockets, and the second rocket being of type "Exploration Vessel":')),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n  "data": {\n    "launch": {\n      "id": "Mocked Id Scalar",\n      "site": "Kennedy Space Station",\n      "rockets": [\n        {\n          "name": "Mocked String Scalar",\n          "type": "Mocked String Scalar",\n          "fuel": "PLASMA"\n        },\n        {\n          "name": "Mocked String Scalar",\n          "type": "Exploration Vessel",\n          "fuel": "DILITHIUM"\n        }\n      ],\n      "isBooked": true\n    }\n  }\n}\n')),Object(c.b)("p",null,"All other fields that haven't been explicitly mocked will be mocked with default values."),Object(c.b)("h2",{id:"what-is-the-scenario"},"What is the Scenario?"),Object(c.b)("p",null,"In order to build the correct intuition about what is a scenario, let's think about how the ",Object(c.b)("inlineCode",{parentName:"p"},"Query")," type would look in its object form."),Object(c.b)("p",null,"For example, take the following slightly modified schema:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const schema = `\n  type Query {\n    launch: Launch\n    rockets(type: String!): [Rockets]!\n  }\n\n  type Launch {\n    id: ID!\n    site: String\n    rockets: [Rocket]\n    isBooked: Boolean!\n  }\n\n  type Rocket {\n    id: ID!\n    name: String\n    type: String\n  }\n`;\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"Query")," type ",Object(c.b)("em",{parentName:"p"},"object form")," (or in short the ",Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"Query")," object form"),") is:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  launch: {\n    id: ...,\n    site: ...,\n    rockets: [\n      { id: ..., name: ..., type: ...},\n      ...\n    ],\n    isBooked: ...\n  },\n  rockets: [\n    { id: ..., name: ..., type: ...},\n    ...\n  ],\n}\n")),Object(c.b)("p",null,"The scenario is an object with ",Object(c.b)("strong",{parentName:"p"},"the same structure as the ",Object(c.b)("inlineCode",{parentName:"strong"},"Query")," object form"),"."),Object(c.b)("h3",{id:"the-scenario-can-mock-fewer-fields-than-whats-in-the-schema"},"The scenario can mock fewer fields than what's in the schema"),Object(c.b)("p",null,"A scenario doesn't need to contain all of its fields. In fact, ",Object(c.b)("strong",{parentName:"p"},"it can contain as few or as many fields we want to mock"),", as long as it matches the structure of the ",Object(c.b)("inlineCode",{parentName:"p"},"Query")," object form."),Object(c.b)("p",null,"These are all valid scenarios:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  launch: {\n    site: "Kennedy Space Station",\n    rockets: [{}, { type: "Exploration Vessel" }],\n    isBooked: true,\n  },\n}\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  launch: {\n    site: "Kennedy Space Station",\n  },\n  rockets: [{}, {}],\n}\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  rockets: [{ type: "Starship", name: "Enterprise" }],\n}\n')),Object(c.b)("h3",{id:"it-can-go-as-deep-as-possible"},"It can go as deep as possible"),Object(c.b)("p",null,"A scenario can be as deep or as shallow we want, type permitting. Take the following schema:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  me: User\n}\n\ntype User {\n  address: Address!\n}\n\ntype Address {\n  city: String\n  country: Country!\n}\n\ntype Country {\n  language: String!\n}\n")),Object(c.b)("p",null,"These are all valid scenarios:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  me: {\n    address: {\n      country: {\n        language: "Latin",\n      }\n    }\n  }\n}\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  me: {\n    address: {\n      city: "Berlin",\n    }\n  }\n}\n')),Object(c.b)("p",null,Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/mocking-types"}),"Next"),", we'll learn how to mock individual types using another mock provider: builders."))}p.isMDXComponent=!0},178:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},u=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,d=u["".concat(o,".").concat(m)]||u[m]||b[m]||c;return t?r.a.createElement(d,i({ref:n},l,{components:t})):r.a.createElement(d,i({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<c;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);