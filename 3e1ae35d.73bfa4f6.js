(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{148:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(9),i=(n(0),n(178)),o={id:"mocking-mutations",title:"Mutations",sidebar_label:"Mocking Mutations \u274c"},c={id:"mocking-mutations",title:"Mutations",description:"Managing changes to data in Mutation resolvers",source:"@site/docs/mocking-mutations.md",permalink:"/graphql-kimera/docs/mocking-mutations",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/website/docs/mocking-mutations.md",sidebar_label:"Mocking Mutations \u274c",sidebar:"docs",previous:{title:"Interfaces",permalink:"/graphql-kimera/docs/abstract-types"},next:{title:"Glossary",permalink:"/graphql-kimera/docs/glossary"}},s=[{value:"Modifying fields with arguments",id:"modifying-fields-with-arguments",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Managing changes to data in Mutation resolvers"),Object(i.b)("p",null,"Lets modify the schema to add support for a ",Object(i.b)("inlineCode",{parentName:"p"},"addCity")," mutation that accepts the name of the city, and returns the complete list of cities, including the new one."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"# ...\n\ntype AddCityResult {\n  cities: [City]\n}}\n\ntype Mutation {\n   addCity(name: String): AddCityResultt\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n\n# ...\n")),Object(i.b)("p",null,"In order to pass a resolver for that mutation to Kimera, we need to pass a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/api-get-executable-schema#getmutationresolverscache-buildmocks-context"}),"getMutationResolvers function")," as an argument to ",Object(i.b)("inlineCode",{parentName:"p"},"getExecutableSchema"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"getMutationResolvers")," function needs to return an object with ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/glossary#resolver"}),"resolvers")," for all mutation we want to handle:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// ...\n\nfunction getMutationResolvers(cache, buildMocks) {\n  return {\n    addCity: (_, { name }) => {\n      const newCity = buildMocks("City", { name });\n\n      cache.cities = cache.cities ? [...cache.cities, newCity] : [newCity];\n\n      return {\n        cities: cache.cities,\n      };\n    },\n  };\n}\n\n// ...\n\nconst executableSchema = getExecutableSchema(\n  typeDefs,\n  getDefaultDataSources,\n  {},\n  getMutationResolvers\n);\n\n// ...\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"getMutationResolvers")," function receives:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a reference to the data ",Object(i.b)("inlineCode",{parentName:"li"},"Query")," tree as the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/graphql-kimera/docs/api-get-executable-schema#cache"}),Object(i.b)("inlineCode",{parentName:"a"},"cache")," argument")),Object(i.b)("li",{parentName:"ul"},"the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/graphql-kimera/docs/api-build-mocks"}),Object(i.b)("inlineCode",{parentName:"a"},"buildMocks"))," function that allows us to build a new object with generated data from a specific Object Type. It accepts the ",Object(i.b)("inlineCode",{parentName:"li"},"type")," name, and a ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/graphql-kimera/docs/scenario"}),"Scenario")," which specifies what fields need to be set.")),Object(i.b)("p",null,"The resolver:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"creates a new ",Object(i.b)("inlineCode",{parentName:"li"},"City")," object using the ",Object(i.b)("inlineCode",{parentName:"li"},"City")," object type a template,"),Object(i.b)("li",{parentName:"ul"},"updates the ",Object(i.b)("inlineCode",{parentName:"li"},"cities")," query result by adding the newly created city, and"),Object(i.b)("li",{parentName:"ul"},"returns the result of the mutation in the expected ",Object(i.b)("inlineCode",{parentName:"li"},"AddCityResult")," format.")),Object(i.b)("h3",{id:"modifying-fields-with-arguments"},"Modifying fields with arguments"),Object(i.b)("p",null,"The previous example was pretty straight forward, but lets complicate things a bit by adding an ",Object(i.b)("inlineCode",{parentName:"p"},"addPersona")," mutation."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type AddPersonaResult {\n  personas: [Persona]\n}\n\ntype Mutation {\n  # ...\n  addPersona(cityName: String, name: String): AddPersonaResult\n}\n")),Object(i.b)("p",null,"This looks very similar to the ",Object(i.b)("inlineCode",{parentName:"p"},"addCity")," mutation, so lets implement its resolver in the same way."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// ...\n\nfunction getMutationResolvers(cache, buildMocks) {\n  return {\n    addPersona: (_, { name, cityName }) => {\n      const newPersona = buildMocks("Persona", {\n        name,\n        city: { name: cityName },\n      });\n\n      cache.personas = cache.personas\n        ? [...cache.personas, newPersona]\n        : [newPersona];\n\n      return {\n        personas: cache.personas,\n      };\n    },\n  };\n}\n\n// ...\n')),Object(i.b)("p",null,"Running this code and executing an ",Object(i.b)("inlineCode",{parentName:"p"},"addPersona")," mutation will result in a ",Object(i.b)("inlineCode",{parentName:"p"},"cache.personas is not iterable")," error. Can you figure out why? A clue can be found by comparing ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/tutorial-fields-with-args#faking-dependencies"}),"the ",Object(i.b)("inlineCode",{parentName:"a"},"cities")," builder")," to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/tutorial-fields-with-args"}),"the ",Object(i.b)("inlineCode",{parentName:"a"},"personas")," builder"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const typeBuilders = {\n  ['Query']: () => ({\n    cities: times(5, () => ({ name: casual.city }));,\n    personas: getPersonas => {\n      return function personasResolver(_, { city }) {\n        return city\n          ? getPersonas().filter(persona => persona.city.name === city)\n          : getPersonas();\n      };\n    },\n  }),\n};\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  cities: [City]\n  personas(city: String): [Persona]\n}\n")),Object(i.b)("p",null,"As you may now remember, ",Object(i.b)("inlineCode",{parentName:"p"},"personas")," is a field that accepts arguments, which prompted us to implement a resolver factory (ie. a function that returns a resolver function) for it. The builder for the ",Object(i.b)("inlineCode",{parentName:"p"},"cities")," field is just an Array."),Object(i.b)("p",null,"This means that when building the ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," type data tree (the one that gets passed down as the ",Object(i.b)("inlineCode",{parentName:"p"},"cache")," argument in our ",Object(i.b)("inlineCode",{parentName:"p"},"buildMocks")," function), Kimera sets static values only for fields without any arguments."),Object(i.b)("p",null,"However, when a field meets the following two conditions..."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the field has arguments,"),Object(i.b)("li",{parentName:"ul"},"and Kimera can find a resolver factory in an Object Type builder for it,\n...the value set in the ",Object(i.b)("inlineCode",{parentName:"li"},"cache")," for the field is the resolver function.")),Object(i.b)("p",null,"In our case, our ",Object(i.b)("inlineCode",{parentName:"p"},"personas")," field from the ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," type is a field with arguments, and Miage can find a resolver factory function for it in the ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," Object Type Builder, so it sets its value to the ",Object(i.b)("inlineCode",{parentName:"p"},"personasResolver")," function."),Object(i.b)("p",null,"That explains our ",Object(i.b)("inlineCode",{parentName:"p"},"cache.personas is not iterable")," error, since the spread operator works on ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://javascript.info/iterable"}),"iterables"),", and the ",Object(i.b)("inlineCode",{parentName:"p"},"personasResolver")," function is not an iterable. For these cases, Kimera adds a handy ",Object(i.b)("inlineCode",{parentName:"p"},"getData")," function on the resolver function that allows us to get the data."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// ...\n\nfunction getMutationResolvers(cache, buildMocks) {\n  return {\n    addPersona: (_, { cityName, name }) => {\n      const newPersona = buildMocks("Persona", {\n        name,\n        city: { name: cityName },\n      });\n\n      const personaList = cache.personas.getData();\n      cache.personas = personaList\n        ? [...personaList, newPersona]\n        : [newPersona];\n\n      return {\n        personas: cache.personas,\n      };\n    },\n  };\n}\n\n// ...\n')),Object(i.b)("p",null,"Running the mutation again will return the expected result."),Object(i.b)("p",null,"This concludes our tutorial. You should now be able to conquer the world. If you can't, open an issue in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lola-tech/graphql-kimera"}),"graphql-kimera repo"),"."))}p.isMDXComponent=!0},178:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(m,c({ref:t},l,{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);