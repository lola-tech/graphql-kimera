(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{148:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),o=n(9),r=(n(0),n(178)),i={id:"mocking-mutations",title:"Mutations",sidebar_label:"Mocking Mutations"},c={id:"mocking-mutations",title:"Mutations",description:"> _Manage change by updating the store in mutation resolvers._",source:"@site/docs/mocking-mutations.md",permalink:"/graphql-kimera/docs/mocking-mutations",editUrl:"https://github.com/lola-tech/graphql-kimera/edit/master/website/docs/mocking-mutations.md",sidebar_label:"Mocking Mutations",sidebar:"docs",previous:{title:"Query Resolvers",permalink:"/graphql-kimera/docs/query-resolvers"},next:{title:"Abstract Types",permalink:"/graphql-kimera/docs/abstract-types"}},s=[{value:"<code>mutationResolversFn</code> example",id:"mutationresolversfn-example",children:[]},{value:"<code>mutationResolversFn</code> API",id:"mutationresolversfn-api",children:[]},{value:"<code>store</code> and <code>buildMocks</code> examples",id:"store-and-buildmocks-examples",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("em",{parentName:"p"},"Manage change by updating the store in mutation resolvers."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This page assumes you know you to setup your app to use the Kimera executable schema. If you don't, check out the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/graphql-kimera/docs/mocking-mutations"}),"Setup section of the docs"),"."))),Object(r.b)("p",null,"Let's start with a schema that has ",Object(r.b)("inlineCode",{parentName:"p"},"createRocket")," mutation."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"# ...\n\ntype Mutation {\n  createRocket(input: CreateRocketInput!): CreateRocketPayload!\n}\n\ninput CreateRocketInput {\n  name: String!\n  type: String!\n}\n\ntype CreateRocketPayload {\n  rockets: [Rocket]\n  successful: Boolean!\n}\n\ntype Rocket {\n  id: ID!\n  name: String\n  type: String\n}\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"createRocket")," mutation takes a ",Object(r.b)("inlineCode",{parentName:"p"},"name")," and a ",Object(r.b)("inlineCode",{parentName:"p"},"type")," for the new rocket, and returns the complete list of rockets, including the new one if it's successful."),Object(r.b)("h2",{id:"mutationresolversfn-example"},Object(r.b)("inlineCode",{parentName:"h2"},"mutationResolversFn")," example"),Object(r.b)("p",null,"In order to pass this new mutation, we'll have to do it as part of the return object of a new ",Object(r.b)("inlineCode",{parentName:"p"},"getExecutableSchema")," option: ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"mutationResolversFn")),"."),Object(r.b)("p",null,"To define a resolver for a mutation with Kimera, we need use a new ",Object(r.b)("inlineCode",{parentName:"p"},"getExecutableSchema")," option: the ",Object(r.b)("inlineCode",{parentName:"p"},"mutationResolversFn")," function."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"mutationResolversFn")," needs to return an object with all mutation resolvers we want to define."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{3,7,12,14,19}","{3,7,12,14,19}":!0}),'const executableSchema = getExecutableSchema({\n  // typeDefs & mockProviders\n  mutationResolversFn: (store, buildMocks) => ({\n    // Example of how you would use buildMocks to build a node of a specific\n    // type. If the Rocket `type` is omitted from the `input`, the `Shuttle`\n    // value defined in the `Rocket` builder is used.\n    createRocket: (_, { input }) => {\n      let newRocket = null;\n      // Example of mocking the unhappy path\n      if (input.name !== "Fail") {\n        // Mock a new `Rocket` using the `input` arg as a scenario\n        newRocket = buildMocks("Rocket", { ...input });\n        // Update the store by appending the new rocket\n        store.update({ rockets: [...store.get("rockets"), newRocket] });\n      }\n\n      return {\n        successful: input.name !== "Fail",\n        rockets: store.get("rockets"),\n      };\n    },\n  }),\n});\n')),Object(r.b)("h2",{id:"mutationresolversfn-api"},Object(r.b)("inlineCode",{parentName:"h2"},"mutationResolversFn")," API"),Object(r.b)("p",null,"Kimera passes two arguments to ",Object(r.b)("inlineCode",{parentName:"p"},"mutationResolversFn"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"store"),": This is an object which holds all of the mocks for our app. It defines two methods:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"store.get(path = '')"),": The ",Object(r.b)("inlineCode",{parentName:"li"},"get")," method will accept an optional ",Object(r.b)("inlineCode",{parentName:"li"},"path")," string, and return the mocked value stored at that specific path."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"store.update(path, updateValue)"),": The ",Object(r.b)("inlineCode",{parentName:"li"},"update")," will update the value at the supplied ",Object(r.b)("inlineCode",{parentName:"li"},"path")," with the new value. If the updated value is an object, the new value will be deeply merged over the existing value."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"buildMocks('TypeName', scenario)"),": This is a function mocks a specific type using existing mock providers, and optionally, a custom scenario that we can provide at execution.")),Object(r.b)("p",null,"Next we'll look at several examples of using these arguments."),Object(r.b)("h2",{id:"store-and-buildmocks-examples"},Object(r.b)("inlineCode",{parentName:"h2"},"store")," and ",Object(r.b)("inlineCode",{parentName:"h2"},"buildMocks")," examples"),Object(r.b)("p",null,"Starting with some form of the following schema:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  launch: Launch\n}\n\ntype Launch {\n  rockets: [Rocket]\n  address: Address\n}\n\ntype Address {\n  line1: String\n  country: String\n}\n\ntype Rocket {\n  ...\n}\n")),Object(r.b)("p",null,"Here are a few ways affect the mocked data in a mutation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"getExecutableSchema({\n  typeDefs,\n  mockProvidersFn: (context) => ({\n    builders: {\n      Address: () => ({\n        line1: \"Example Street\",\n        country: \"Examplestan\"\n      })\n    }\n  }),\n  mutationResolversFn: (store, buildMocks) => ({\n    [mututationName]: function resolver(_, args, ...) {\n      // Returns the 'Query' type mocks.\n      store.get();\n\n      // Returns the mocks for a value deeper in the graph.\n      // This can go as deep as needed. e.g.: 'launch.rockets.0.name'.\n      store.get('launch.rockets.0');\n\n      // Partially update the value of an Object Type field.\n      store.update('launch.address', {\n        country: 'Cuba'\n      });\n\n      // Completely replace an Object Type.\n      store.update(\n        'launch.address',\n        // When the supplied scenario omits fields, like we do with `line1`\n        // here, Kimera will use a builder to figure out how mock it.\n        // In this case, `buildMocks` will use `Example Street` mock for the `line1` field.\n        buildMocks('Address', { country: 'Cuba' }),\n      );\n\n      // Replace a list field with an empty list.\n      store.update('launch.rockets', [])\n\n      // Append a list field.\n      store.update('launch.rockets', [\n        ...store.get('launch.listField'),\n        // The `buildMocks` scenario can be omitted, and Kimera will use the\n        // 'Rocket' builder, if existing to figure out how to mock this type.\n        buildMocks('Rocket')\n      ]);\n      // ...\n    }\n  })\n})\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"For an example of using mutations, check out the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lola-tech/graphql-kimera/tree/master/examples/server"}),"server example in the Kimera Github repository"),"."))))}p.isMDXComponent=!0},178:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,d=u["".concat(i,".").concat(m)]||u[m]||b[m]||r;return n?o.a.createElement(d,c({ref:t},l,{components:n})):o.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);